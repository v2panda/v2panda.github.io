<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[v2panda's blog]]></title>
  <subtitle><![CDATA[subtitle]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://v2panda.com/"/>
  <updated>2015-12-13T08:00:18.000Z</updated>
  <id>http://v2panda.com/</id>
  
  <author>
    <name><![CDATA[熊猫]]></name>
    <email><![CDATA[pdxuzhen@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[如何仿写一个App]]></title>
    <link href="http://v2panda.com/2015/12/06/how-to-imitation-app/"/>
    <id>http://v2panda.com/2015/12/06/how-to-imitation-app/</id>
    <published>2015-12-06T12:47:37.000Z</published>
    <updated>2015-12-13T08:00:18.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>最近看到一篇文章<a href="http://www.infoq.com/cn/news/2015/11/ibireme-interview?utm_source=infoq&amp;utm_medium=popular_widget&amp;utm_campaign=popular_content_list&amp;utm_content=homepage" target="_blank" rel="external">专访YYKit作者郭曜源：开源大牛是怎样炼成的</a>,其中 <a href="http://weibo.com/239801242" target="_blank" rel="external">ibireme</a>提到了他的学习方法，一个就是大量地阅读优秀项目的源代码，另一个就是自己动手实践来尝试。这非常值得学习，对我来说，沉下心来好好写代码才是提高水平的上策，Talk is cheap, Show me the code!<br>这篇blog主要记录仿写一个App的准备工作,这里以美团为例。</p>
<a id="more"></a>
<h1 id="素材">素材</h1><p>首先到iTunes下载美团到本地<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.57.20.png" alt="在Finder中显示"></p>
<p>在Finder中显示,解压ipa文件<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.53.53.png" alt="解压ipa"><br>点击imeituan，显示包内容<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.54.07.png" alt="显示包内容"><br>就能随意查看imeituan的素材内容。<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.54.26.png" alt="素材"></p>
<h1 id="接口">接口</h1><ul>
<li><a href="https://www.charlesproxy.com/" target="_blank" rel="external">Charles</a><br>这是一款在 Mac 下常用的网络封包截取工具，Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成,这里我们主要用它来截取网络封包来分析。</li>
</ul>
<p>这里我们主要截取iPhone上App的网络请求，所以使用 Charles 的第一步在菜单栏上选择 “Proxy”–&gt;“Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置。如下图所示:<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.36.11.png" alt="Proxy"><br>然后我们需要获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”–&gt;“Local IP Address”，即可在弹出的对话框中看到 IP 地址，如下图所示：<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.36.53.png" alt="IP"></p>
<p>最后在 iPhone 的「HTTP 代理」，将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888，如下图所示：<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-appUntitled3.png" alt="8888"></p>
<p>接下来在手机上运行美团，就能再Charles上查看网络请求，如下所示：<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.51.13.png" alt="flurry"><br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.52.48.png" alt="http"><br>这是美团启动是Charles的显示，可以看到<code>http://data.flurry.com</code>的请求，显而易见美团iOS是使用flurry统计数据的。关于Charles详细使用方法可以查看<a href="http://blog.devtang.com/blog/2015/11/14/charles-introduction/" target="_blank" rel="external">这篇博客</a>。</p>
<h1 id="App结构">App结构</h1><p>这里使用Reaveal + iPhone(越狱)来分析App的UI视图结构。</p>
<p>准备工作：<br>1.iPhone越狱。<br>2.越狱后iPhone上会自行安装上Cydia商店，打开Cydia，先在tabBar的“变更”页面刷新软件源。刷新成功后用Cydia搜索并安装Reveal loader ，安装完成后点击重启springboard。</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-appUntitled.png" alt="Reveal loader"></p>
<p>3.在系统设置中找到Reveal，点击Reveal - Enabled Applications，将美团选为Enabled。</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-appUntitled2.png" alt="Enabled"></p>
<p>4.安装<a href="http://revealapp.com/" target="_blank" rel="external">Reveal</a>。<br>5.首先保证iPhone和Mac在同一局域网（WiFi）中，在iPhone中运行你要监视的app，如果app已经运行，需在后台杀死进程重新打开，保持app在前台，然后在Mac中打开Reveal，点击左上角的No Connection，然后选择即可。<br>6.Commend+5 切换3D模式。每当iPhone上的app页面切换后，需要点击Reveal窗口右上角刷新（Commend+R）。在局域网内负荷较大时，视图刷新会很慢，可以用iPhone共享热点给Mac解决。</p>
<p>准备完毕后，就能在Reveal上随意查看App结构了，如下图所示:<br><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-how-to-imitation-app屏幕快照%202015-12-01%20下午5.56.41.png" alt="App结构"></p>
<h1 id="后记">后记</h1><p>这篇blog主要记录仿写一个App的准备工作,包括获取素材，接口，以及查看App层级结构，关于如何仿写怎么仿写，就得自己去Coding了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>最近看到一篇文章<a href="http://www.infoq.com/cn/news/2015/11/ibireme-interview?utm_source=infoq&amp;utm_medium=popular_widget&amp;utm_campaign=popular_content_list&amp;utm_content=homepage">专访YYKit作者郭曜源：开源大牛是怎样炼成的</a>,其中 <a href="http://weibo.com/239801242">ibireme</a>提到了他的学习方法，一个就是大量地阅读优秀项目的源代码，另一个就是自己动手实践来尝试。这非常值得学习，对我来说，沉下心来好好写代码才是提高水平的上策，Talk is cheap, Show me the code!<br>这篇blog主要记录仿写一个App的准备工作,这里以美团为例。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[自建网络调试工具]]></title>
    <link href="http://v2panda.com/2015/11/25/network-debugging-tools/"/>
    <id>http://v2panda.com/2015/11/25/network-debugging-tools/</id>
    <published>2015-11-25T07:30:51.000Z</published>
    <updated>2015-11-29T14:15:21.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>最近用的VPN越来越不稳定了，决定搭个小梯子自用。</p>
<table>
<thead>
<tr>
<th>我的选择</th>
<th style="text-align:center">以前</th>
<th style="text-align:center">现在</th>
</tr>
</thead>
<tbody>
<tr>
<td>手机</td>
<td style="text-align:center">Hydro</td>
<td style="text-align:center">Surge</td>
</tr>
<tr>
<td>PC</td>
<td style="text-align:center">VPN + Lantern</td>
<td style="text-align:center">Shadowsocks</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>而在Surge上也是可以用Shadowsocks的，并且Shadowsocks有以下特点：</p>
<ul>
<li>省电，在电量查看里几乎看不到它的身影；</li>
<li>支持开机自启动，且断网无影响，无需手动重连，方便网络不稳定或者3G&amp;Wi-Fi频繁切换的小伙伴；</li>
<li>可使用自己的服务器，安全和速度的保证；</li>
<li>支持区分国内外流量，传统VPN在翻出墙外后访问国内站点会变慢；</li>
<li>可对应用设置单独代理，5.0之后的系统无需root。</li>
</ul>
<p>虽然由于<a href="http://www.freebuf.com/news/76451.html" target="_blank" rel="external">喝茶事件</a>，ss 的作者已经删除项目，不过目前还能用,所以搭建一个VPS安装Shadowsocks是我的最佳选择。</p>
<h1 id="VPS">VPS</h1><p>VPS有许许多多，但想要达到网络调试的目的还是得选择海外的服务器。<br>目前主流的VPS提供商有3个</p>
<ul>
<li>Banwagong</li>
<li>DigitalOcean</li>
<li>Linode</li>
</ul>
<p>若不知道如何选择，可以参考下表(比较的都是最低套餐)</p>
<table>
<thead>
<tr>
<th>VPS</th>
<th style="text-align:center">架构</th>
<th style="text-align:center">内存</th>
<th style="text-align:center">硬盘</th>
<th style="text-align:center">流量</th>
<th style="text-align:center">费用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Banwagong</td>
<td style="text-align:center">OpenVZ</td>
<td style="text-align:center">256M</td>
<td style="text-align:center">10G</td>
<td style="text-align:center">500G/M</td>
<td style="text-align:center">19.99 $/Y</td>
</tr>
<tr>
<td>DigitalOcean</td>
<td style="text-align:center">KVM</td>
<td style="text-align:center">512M</td>
<td style="text-align:center">20G</td>
<td style="text-align:center">1T/M</td>
<td style="text-align:center">5 $/M</td>
</tr>
<tr>
<td>Linode</td>
<td style="text-align:center">Xen</td>
<td style="text-align:center">1G</td>
<td style="text-align:center">24G</td>
<td style="text-align:center">2T/M</td>
<td style="text-align:center">10 $/M</td>
</tr>
</tbody>
</table>
<p>个人建议，对连接速度和稳定性尤其是网络延迟有极高要求的首选Linode，有较高要求的推荐DigitalOcean，对于普通用户来讲，搬瓦工就可以。<br>一般用 paypal 支付，因为用信用卡可能会要求你上传身份证明以及信用卡照片什么的，而且审核过程也需要等待，比较麻烦。注意要用国际 paypal 帐号，国内的是不能用外币付款的。</p>
<h1 id="Shadowsocks">Shadowsocks</h1><p>VPS选择完毕后，直接登录开始安装。</p>
<p>Mac OS X 或 Linux 下直接在终端中 ssh root@your_vps_ip -p your_ssh_port   即可。</p>
<p>Debian / Ubuntu:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>
<p>CentOS:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> python-setuptools &amp;&amp; easy_install pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">server</span>":<span class="value"><span class="string">"0.0.0.0"</span></span>,</span><br><span class="line">    "<span class="attribute">server_port</span>":<span class="value">yourport</span>,</span><br><span class="line">    "<span class="attribute">local_address</span>": <span class="value"><span class="string">"127.0.0.1"</span></span>,</span><br><span class="line">    "<span class="attribute">local_port</span>":<span class="value"><span class="number">1080</span></span>,</span><br><span class="line">    "<span class="attribute">password</span>":<span class="value"><span class="string">"yourpassword"</span></span>,</span><br><span class="line">    "<span class="attribute">timeout</span>":<span class="value"><span class="number">300</span></span>,</span><br><span class="line">    "<span class="attribute">method</span>":<span class="value"><span class="string">"aes-256-cfb"</span></span>,</span><br><span class="line">    "<span class="attribute">fast_open</span>": <span class="value"><span class="literal">false</span></span>,</span><br><span class="line">    "<span class="attribute">workers</span>": <span class="value"><span class="number">1</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<p><code>ssserver -p 443 -k password -m rc4-md5</code></p>
<p>后台运行：</p>
<p><code>sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</code></p>
<p>停止：</p>
<p><code>sudo ssserver -d stop</code></p>
<p>检查日志：</p>
<p><code>sudo less /var/log/shadowsocks.log</code></p>
<p>更具体的可以查看<a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" target="_blank" rel="external">wiki</a>。</p>
<h1 id="Surge">Surge</h1><p>Surge 是基于 iOS 9 的新特性 <code>Network Extension</code> 开发的一款网络调试工具，工作原理是使用 Packet Tunnel Provider 给系统套上一个代理，Surge 有两个主要组件：Surge 代理服务器和 Surge TUN 接口。程序运行之后，Surge 会将自身设置为默认的 HTTP/HTTPS 代理服务器来处理所有的 HTTP/HTTPS 流量。针对一些不服从系统代理设置的应用程序 ，将由 Surge 的 TUN 接口来进行处理。</p>
<p>Surge具体的使用可以查看<a href="http://surge.run/manual/" target="_blank" rel="external">manual</a>，这里我们主要配置Surge在iOS上使用Shadowsocks。</p>
<p>如果需要使用shadowsocks，目前surge 通过module支持配置，具体配置规则类似下面的配置，具体的服务器、端口、加密方式、密码参照你自己的SS配置：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Proxy]</span><br><span class="line"></span><br><span class="line">Proxy = custom, IP, Port, <span class="function"><span class="keyword">Method</span>, <span class="title">password</span>, <span class="title">Module</span></span></span><br></pre></td></tr></table></figure>
<p>Proxy类型必须是custom，如果改成其他名称会报错，剩下的地址按照服务商提供的来填，最后要加上SS module的地址，目前surge 的官网已经删掉了module文件，可以从<a href="https://www.dropbox.com/s/jfvicg5omhlgg6g/SSEncrypt.module?dl=0" target="_blank" rel="external">这里</a>下载，下载后上传到你自己的网址。</p>
<h1 id="我的选择">我的选择</h1><p>我个人的选择供大家参考：</p>
<p>DigitalOcean，San Francisco节点，1TB流量。</p>
<p>若有想用DigitalOcean可以使用<a href="https://www.digitalocean.com/?refcode=93cc79d1d49b" target="_blank" rel="external">此链接</a>注册,可以得到10$。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>最近用的VPN越来越不稳定了，决定搭个小梯子自用。</p>
<table>
<thead>
<tr>
<th>我的选择</th>
<th style="text-align:center">以前</th>
<th style="text-align:center">现在</th>
</tr>
</thead>
<tbody>
<tr>
<td>手机</td>
<td style="text-align:center">Hydro</td>
<td style="text-align:center">Surge</td>
</tr>
<tr>
<td>PC</td>
<td style="text-align:center">VPN + Lantern</td>
<td style="text-align:center">Shadowsocks</td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="Shadowsocks" scheme="http://v2panda.com/tags/Shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[滑动返回手势探究]]></title>
    <link href="http://v2panda.com/2015/10/13/research-slidingback-gesture/"/>
    <id>http://v2panda.com/2015/10/13/research-slidingback-gesture/</id>
    <published>2015-10-13T08:44:49.000Z</published>
    <updated>2015-11-26T06:52:56.000Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><p>从iOS7开始，苹果增加了页面右滑返回的效果，具体的是以UINavigationController为容器的ViewController间右滑切换页面。</p>
<p>代码里的设置是：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">YES</span>;（<span class="keyword">default</span> is <span class="literal">YES</span>）</span><br></pre></td></tr></table></figure>
<p>可以看到苹果给navigationController添加了一个手势（具体为<code>UIScreenEdgePanGestureRecognizer</code>（边缘手势，同样是ios7以后才有的）），就是利用这个手势实现的 iOS7的侧滑返回。</p>
<p>但在日常开发中，我们大多会自定义返回按钮，此时系统的右滑返回就会失效。然而支持滑动返回已成为iOS上必须实现的交互，若没有那APP离被卸载就不远了。</p>
<a id="more"></a>
<h4 id="设置interactivePopGestureRecognizer">设置interactivePopGestureRecognizer</h4><p>对于这种失效的情况，考虑到<code>interactivePopGestureRecognizer</code>也有delegate属性，替换默认的self.navigationController.interactivePopGestureRecognizer.delegate来配置右滑返回的表现也是可行的。我们可以在主NavigationController中设置一下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self<span class="class">.navigationController</span><span class="class">.interactivePopGestureRecognizer</span><span class="class">.delegate</span> =(id)self</span><br></pre></td></tr></table></figure>
<p>然而这样又会出现很多问题，比如说在rootViewController的时候这个手势也可以响应，导致整个程序页面不响应；push了多层后，快速的触发两次手势，也会错乱。</p>
<h4 id="最佳方案">最佳方案</h4><p>通过设置interactivePopGestureRecognizer可以简单的实现，但又会出现很多问题，所以我们可以自己实现一个手势去替换掉系统的，运用</p>
<ul>
<li>runtime+KVC+AOP</li>
</ul>
<p>的方式，用KVC拿到interactivePopGestureRecognizer的target和action，用runtime动态替换掉，面向切面编程，不用在原工程上增删代码。</p>
<h4 id="实现">实现</h4><p>还是写码最省事，直接动手！</p>
<p>首先，创建一个UINavigationController的分类,再添加UIViewController的分类,在UINavigationController.h里声明自定义的手势，在UIViewController.h里声明<code>pda_interactivePopDisabled</code>是否显示手势和pda_interactivePopMaxAllowedInitialDistanceToLeftEdge手势滑动距左边最大的距离。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UINavigationController</span> (<span class="title">PDAPopGesture</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">readonly</span>) <span class="built_in">UIPanGestureRecognizer</span> *pda_popGestureRecognizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span> (<span class="title">PDAPopGesture</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> pda_interactivePopDisabled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> pda_interactivePopMaxAllowedInitialDistanceToLeftEdge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在.m里定义一个私有类，设置手势的执行条件。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"UINavigationController+PDAPopGesture.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PDAFullscreenPopGestureRecognizerDelegate</span> : <span class="title">NSObject</span> &lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UINavigationController</span> *navigationController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PDAFullscreenPopGestureRecognizerDelegate</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIPanGestureRecognizer</span> *)gestureRecognizer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 当为根控制器时，手势不执行。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.viewControllers</span><span class="variable">.count</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置一个页面是否显示此手势，默认为NO 显示。</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *topViewController = <span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.viewControllers</span><span class="variable">.lastObject</span>;</span><br><span class="line">    <span class="keyword">if</span> (topViewController<span class="variable">.pda_interactivePopDisabled</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  手势滑动距左边框的距离超过maxAllowedInitialDistance 手势不执行。</span></span><br><span class="line">    <span class="built_in">CGPoint</span> beginningLocation = [gestureRecognizer locationInView:gestureRecognizer<span class="variable">.view</span>];</span><br><span class="line">    <span class="built_in">CGFloat</span> maxAllowedInitialDistance = topViewController<span class="variable">.pda_interactivePopMaxAllowedInitialDistanceToLeftEdge</span>;</span><br><span class="line">    <span class="keyword">if</span> (maxAllowedInitialDistance &gt; <span class="number">0</span> &amp;&amp; beginningLocation<span class="variable">.x</span> &gt; maxAllowedInitialDistance) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当push、pop动画正在执行时，手势不执行。</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span><span class="variable">.navigationController</span> valueForKey:<span class="string">@"_isTransitioning"</span>] boolValue]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  向左边(反方向)拖动，手势不执行。</span></span><br><span class="line">    <span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:gestureRecognizer<span class="variable">.view</span>];</span><br><span class="line">    <span class="keyword">if</span> (translation<span class="variable">.x</span> &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>再在UINavigationController的实现里用Method Swizzling替换pushViewController方法。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+(void)load</span><br><span class="line">&#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        Class <span class="class"><span class="keyword">class</span> = [<span class="title">self</span> <span class="title">class</span>];</span></span><br><span class="line">        </span><br><span class="line">        SEL originalSelector = @selector(pushViewController:animated:);</span><br><span class="line">        SEL swizzledSelector = @selector(pda_pushViewController:animated:);</span><br><span class="line">        </span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">originalSelector);</span></span></span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">swizzledSelector);</span></span></span><br><span class="line">        </span><br><span class="line">        BOOL success = class_addMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">originalSelector</span>, <span class="typename">method_getImplementation</span></span>(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            class_replaceMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">swizzledSelector</span>, <span class="typename">method_getImplementation</span></span>(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要注意的是Method Swizzling API 提供的三个方法来动态替换类方法或实例方法。</p>
<ul>
<li>class_replaceMethod                         替换类方法的定义</li>
<li>method_exchangeImplementations   交换 2 个方法的实现</li>
<li>method_setImplementation               设置 1 个方法的实现</li>
</ul>
<p>而这三个又有些使用上的区别，class_replaceMethod, 当需要替换的方法可能有不存在的情况时，可以考虑使用该方法。method_exchangeImplementations，当需要交换 2 个方法的实现时使用。method_setImplementation 最简单的用法，当仅仅需要为一个方法设置其实现方式时使用。</p>
<p>所以这里得先确认添加的方法是否存在，举个具体的例子, 假设要替换掉[NSView description]方法，如果NSView 没有实现-description (可选的) 那你就可会得到NSObject的方法。 如果调用method_exchangeImplementations , 你就会把NSObject 的方法替换成你的代码，这显然不是我们想要的。</p>
<p>所以在这里定义一个BOOL值来接收class_addMethod的返回值，class_addMethod会动态的给类添加方法，若方法fd_viewWillAppear已存在，class_addMethod会返回失败，此时调用method_exchangeImplementations去替换，若不存在，则用class_replaceMethod替换。</p>
<p>继续实现pda_pushViewController:animated方法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)pda_pushViewController:(<span class="built_in">UIViewController</span> *)viewController animated:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.view</span><span class="variable">.gestureRecognizers</span> containsObject:<span class="keyword">self</span><span class="variable">.pda_popGestureRecognizer</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//  添加我们自己的侧滑返回手势</span></span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.view</span> addGestureRecognizer:<span class="keyword">self</span><span class="variable">.pda_popGestureRecognizer</span>];</span><br><span class="line">        <span class="comment">/*</span><br><span class="line">         新建一个UIPanGestureRecognizer，让它的触发和系统的这个手势相同，</span><br><span class="line">         这就需要利用runtime获取系统手势的target和action。</span><br><span class="line">         */</span></span><br><span class="line">        <span class="comment">//  用KVC取出target和action</span></span><br><span class="line">        <span class="built_in">NSArray</span> *internalTargets = [<span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span> valueForKey:<span class="string">@"targets"</span>];</span><br><span class="line">        <span class="keyword">id</span> internalTarget = [internalTargets<span class="variable">.firstObject</span> valueForKey:<span class="string">@"target"</span>];</span><br><span class="line">        SEL internalAction = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"handleNavigationTransition:"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  将自定义的代理（手势执行条件）传给手势的delegate</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.pda_popGestureRecognizer</span><span class="variable">.delegate</span> = <span class="keyword">self</span><span class="variable">.pda_popGestureRecognizerDelegate</span>;</span><br><span class="line">        <span class="comment">//  将target和action传给手势</span></span><br><span class="line">        [<span class="keyword">self</span><span class="variable">.pda_popGestureRecognizer</span> addTarget:internalTarget action:internalAction];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//  设置系统的为NO</span></span><br><span class="line">        <span class="keyword">self</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  执行原本的方法</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span><span class="variable">.viewControllers</span> containsObject:viewController]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> pda_pushViewController:viewController animated:animated];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中要注意的是将前面定义的手势触发条件的delegate传给pda_popGestureRecognizer的delegate。</p>
<p>最后补上pda_popGestureRecognizer的getter和pda_popGestureRecognizerDelegate的setter方法。</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- <span class="list">(<span class="keyword">PDAFullscreenPopGestureRecognizerDelegate</span> <span class="variable">*)pda_popGestureRecognizerDelegate</span><br><span class="line">&#123;</span><br><span class="line">    PDAFullscreenPopGestureRecognizerDelegate *</span>delegate = objc_getAssociatedObject<span class="list">(<span class="keyword">self</span>, _cmd)</span><span class="comment">;</span></span><br><span class="line">    if <span class="list">(!delegate)</span> &#123;</span><br><span class="line">        delegate = [[PDAFullscreenPopGestureRecognizerDelegate alloc] init]<span class="comment">;</span></span><br><span class="line">        delegate.navigationController = self<span class="comment">;</span></span><br><span class="line">        objc_setAssociatedObject<span class="list">(<span class="keyword">self</span>, _cmd, delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC)</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return delegate<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- <span class="list">(<span class="keyword">UIPanGestureRecognizer</span> <span class="variable">*)pda_fullscreenPopGestureRecognizer</span><br><span class="line">&#123;</span><br><span class="line">    UIPanGestureRecognizer *</span>panGestureRecognizer = objc_getAssociatedObject<span class="list">(<span class="keyword">self</span>, _cmd)</span><span class="comment">;</span></span><br><span class="line">    if <span class="list">(!panGestureRecognizer)</span> &#123;</span><br><span class="line">        panGestureRecognizer = [[UIPanGestureRecognizer alloc] init]<span class="comment">;</span></span><br><span class="line">        panGestureRecognizer.maximumNumberOfTouches = <span class="number">1</span><span class="comment">;</span></span><br><span class="line">        objc_setAssociatedObject<span class="list">(<span class="keyword">self</span>, _cmd, panGestureRecognizer, OBJC_ASSOCIATION_RETAIN_NONATOMIC)</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return panGestureRecognizer<span class="comment">;</span></span><br><span class="line">&#125;</span></span></span><br></pre></td></tr></table></figure>
<p>后面UIViewController只需要给出<code>pda_interactivePopMaxAllowedInitialDistanceToLeftEdge</code><br>和<code>pda_interactivePopDisabled</code>的setter和getter即可。</p>
<h4 id="后记">后记</h4><p>大功告成，直接添加到工程里，不用额外代码即可为你的项目添加滑动返回效果，快去试试吧！</p>
<h4 id="参考链接">参考链接</h4><p><a href="http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/" target="_blank" rel="external">http://blog.devtang.com/blog/2013/10/15/objective-c-object-model/</a></p>
<p><a href="http://blog.sina.com.cn/s/blog_65c178a80102v0f4.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_65c178a80102v0f4.html</a></p>
<p><a href="http://www.cocoachina.com/ios/20150120/10959.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20150120/10959.html</a></p>
<p><a href="http://www.jianshu.com/p/d39f7d22db6c" target="_blank" rel="external">http://www.jianshu.com/p/d39f7d22db6c</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><p>从iOS7开始，苹果增加了页面右滑返回的效果，具体的是以UINavigationController为容器的ViewController间右滑切换页面。</p>
<p>代码里的设置是：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span><span class="variable">.navigationController</span><span class="variable">.interactivePopGestureRecognizer</span><span class="variable">.enabled</span> = <span class="literal">YES</span>;（<span class="keyword">default</span> is <span class="literal">YES</span>）</span><br></pre></td></tr></table></figure>
<p>可以看到苹果给navigationController添加了一个手势（具体为<code>UIScreenEdgePanGestureRecognizer</code>（边缘手势，同样是ios7以后才有的）），就是利用这个手势实现的 iOS7的侧滑返回。</p>
<p>但在日常开发中，我们大多会自定义返回按钮，此时系统的右滑返回就会失效。然而支持滑动返回已成为iOS上必须实现的交互，若没有那APP离被卸载就不远了。</p>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://v2panda.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[链式编程初探]]></title>
    <link href="http://v2panda.com/2015/09/29/chain-programming/"/>
    <id>http://v2panda.com/2015/09/29/chain-programming/</id>
    <published>2015-09-29T08:44:49.000Z</published>
    <updated>2015-11-26T06:47:25.000Z</updated>
    <content type="html"><![CDATA[<h4 id="前言">前言</h4><p>最近用了下<a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">masonry</a>,看到许多如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">make</span><span class="class">.top</span><span class="class">.equalTo</span>(<span class="tag">self</span><span class="class">.mas_topLayoutGuide</span>); </span><br><span class="line"><span class="tag">make</span><span class="class">.left</span><span class="class">.equalTo</span>(<span class="tag">self</span><span class="class">.view</span>);</span><br><span class="line"><span class="tag">make</span><span class="class">.right</span><span class="class">.equalTo</span>(<span class="tag">self</span><span class="class">.view</span>);</span><br><span class="line"><span class="tag">make</span><span class="class">.height</span><span class="class">.equalTo</span>(<span class="at_rule">@<span class="keyword">40);</span></span></span><br></pre></td></tr></table></figure>
<p>这样的代码，又通过几篇<a href="http://www.jianshu.com/p/87ef6720a096" target="_blank" rel="external">博客</a>了解到这就是简单地链式编程，所以准备了解一下，并且在学习masonry框架前，也可以学习它的编程思想。</p>
<a id="more"></a>
<h4 id="链式编程思想">链式编程思想</h4><p>是将多个操作（多行代码）通过点号(.)链接在一起成为一句代码,使代码可读性好。如a(1).b(2).c(3)</p>
<h4 id="链式编程特点">链式编程特点</h4><p>方法的返回值是block,block必须有返回值（本身对象），block参数（需要操作的值）</p>
<h4 id="实战">实战</h4><p>模仿masonry，写一个加法计算器，练习链式编程。</p>
<p>1.新建类。</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/234048-193e56372a1f9b54.png" alt="a.png"></p>
<p>2.在CaculatorMaker.h里定义四则运算</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">interface</span> <span class="type">CaculatorMaker</span> : <span class="type">NSObject</span></span><br><span class="line"></span><br><span class="line">@property (nonatomic, assign) <span class="type">int</span> <span class="literal">result</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="type">CaculatorMaker</span> *(^)(<span class="type">int</span>))add;</span><br><span class="line">- (<span class="type">CaculatorMaker</span> *(^)(<span class="type">int</span>))sub;</span><br><span class="line">- (<span class="type">CaculatorMaker</span> *(^)(<span class="type">int</span>))multi;</span><br><span class="line">- (<span class="type">CaculatorMaker</span> *(^)(<span class="type">int</span>))divide;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>3.在CaculatorMaker.m里实现</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">CaculatorMaker</span> *(^)(<span class="type">int</span>))add</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ^id(<span class="type">int</span> x) &#123;</span><br><span class="line">        self.<span class="literal">result</span> += x;</span><br><span class="line">        <span class="keyword">return</span> self;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.定义运算方法</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">CaculatorMaker</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">Caculator</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">int</span>)makeCaculators:(<span class="keyword">void</span>(^)(CaculatorMaker *maker))caculatorMaker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>5.实现</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">int</span>)makeCaculators:(<span class="type">void</span>(^)(<span class="type">CaculatorMaker</span> *maker))caculatorMaker</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CaculatorMaker</span> *maker = [[<span class="type">CaculatorMaker</span> alloc]init];</span><br><span class="line">    caculatorMaker(maker);</span><br><span class="line">    <span class="keyword">return</span> maker.<span class="literal">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>6.最后就能随意调用了</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="literal">result</span> = [<span class="type">NSObject</span> makeCaculators:^(<span class="type">CaculatorMaker</span> *maker) &#123;</span><br><span class="line">        maker.add(<span class="number">1</span>).add(<span class="number">1</span>).add(<span class="number">3</span>).multi(<span class="number">3</span>).sub(<span class="number">5</span>).divide(<span class="number">2</span>);</span><br><span class="line">    &#125;];</span><br></pre></td></tr></table></figure>
<h4 id="后记">后记</h4><p>非常简单的代码，初步的学习了下链式编程，感觉这种编程方式很爽，分享给大家。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="前言">前言</h4><p>最近用了下<a href="https://github.com/SnapKit/Masonry">masonry</a>,看到许多如</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">make</span><span class="class">.top</span><span class="class">.equalTo</span>(<span class="tag">self</span><span class="class">.mas_topLayoutGuide</span>); </span><br><span class="line"><span class="tag">make</span><span class="class">.left</span><span class="class">.equalTo</span>(<span class="tag">self</span><span class="class">.view</span>);</span><br><span class="line"><span class="tag">make</span><span class="class">.right</span><span class="class">.equalTo</span>(<span class="tag">self</span><span class="class">.view</span>);</span><br><span class="line"><span class="tag">make</span><span class="class">.height</span><span class="class">.equalTo</span>(<span class="at_rule">@<span class="keyword">40);</span></span></span><br></pre></td></tr></table></figure>
<p>这样的代码，又通过几篇<a href="http://www.jianshu.com/p/87ef6720a096">博客</a>了解到这就是简单地链式编程，所以准备了解一下，并且在学习masonry框架前，也可以学习它的编程思想。</p>]]>
    
    </summary>
    
      <category term="编程思想" scheme="http://v2panda.com/tags/%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS开发Tips]]></title>
    <link href="http://v2panda.com/2015/07/27/iOS-develop-tips/"/>
    <id>http://v2panda.com/2015/07/27/iOS-develop-tips/</id>
    <published>2015-07-27T08:44:49.000Z</published>
    <updated>2015-12-13T08:04:35.000Z</updated>
    <content type="html"><![CDATA[<h3 id="介绍">介绍</h3><p>随着开发的进行，用到的一些小技巧和插件工具也越来越多。在这里统一的总结一下，方便查阅，时时更新。</p>
<a id="more"></a>
<h5 id="小技巧">小技巧</h5><ul>
<li>一个 GCC 非常模糊的特性，以及 Clang 也有的特性是，代码块如果在闭合的圆括号内的话，会返回最后语句的值。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSURL</span> *url = (&#123; </span><br><span class="line">    <span class="built_in">NSString</span> *urlString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@/%@"</span>, baseURLString, endpoint]; </span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:urlString];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个特性非常适合组织小块的代码，通常是设置一个类。给出一个重要的入口并且减少相关干扰，能让代码聚焦于关键的变量和函数中。此外，这个方法有一个优点，所有的变量都在代码块中，也就是只在代码块的区域中有效，这意味着可以减少对其他作用域的命名污染。</p>
<ul>
<li><p>在 Block 内如果需要访问 self 的方法、变量，建议使用 weakSelf。</p>
<p>如果在 Block 内需要多次 访问 self，则需要使用 strongSelf。</p>
</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__weak __typeof__<span class="list">(<span class="keyword">self</span>)</span> weakSelf = self<span class="comment">;</span></span><br><span class="line"> dispatch_async<span class="list">(<span class="keyword">dispatch_get_global_queue</span><span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span>, ^&#123;</span><br><span class="line">    __strong __typeof<span class="list">(<span class="keyword">self</span>)</span> strongSelf = weakSelf<span class="comment">;</span></span><br><span class="line">    if <span class="list">(<span class="keyword">strongSelf</span>)</span> &#123; </span><br><span class="line">     [strongSelf doSomething]<span class="comment">; </span></span><br><span class="line">     [strongSelf doSomethingElse]<span class="comment">; </span></span><br><span class="line">    &#125; else &#123; </span><br><span class="line">     // Probably nothing... return<span class="comment">; </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>在 doSomething 中，weakSelf 不会变成 nil，不过在 doSomething 执行完成，调用第二个方法 doOtherThing 的时候，weakSelf 有可能被释放。即在没有循环引用的时候，block 是否被 retain 或者是一个属性都没关系。如果 block 被传递或者 copy 了，在执行的时候，weakSelf 可能会变成 nil。于是，strongSelf 就派上用场了,而__strong确保在 Block 内，strongSelf 不会被释放。</p>
<h5 id="Xcode插件">Xcode插件</h5><p>1.<a href="https://github.com/omz/ColorSense-for-Xcode" target="_blank" rel="external">ColorSense for Xcode</a> - 用UIColor或者 NSColor的方法会弹出色盘和颜色角标，赞！</p>
<p>2.<a href="https://github.com/markohlebar/Peckham" target="_blank" rel="external">Peckham</a> - 能十分方便的在代码中引入头文件,支持模糊搜索，快捷键control+command+p。</p>
<p>3.<a href="https://github.com/stefanceriu/SCXcodeMiniMap" target="_blank" rel="external">SCXcodeMinimap</a> - 可以再代码侧面添加一个小地图，方便搜索的时候快速定位，快捷键control+shift+m。</p>
<p>4.<a href="https://github.com/trawor/XToDo" target="_blank" rel="external">XToDo</a> - 快速添加todo list(view -&gt;snippets),且能精确查找todo，快捷键control+t。</p>
<p>5.<a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">VVDocumenter</a> - 快速注释，快捷键///。</p>
<p>6.<a href="https://github.com/ksuther/KSImageNamed-Xcode" target="_blank" rel="external">KSImageNamed</a> - 自动在 imageNamed:方法后面列出项目里所有的文件名，带缩略图。</p>
<p>7.<a href="https://github.com/holtwick/HOStringSense-for-Xcode" target="_blank" rel="external">HOStringSense</a> - 格式化字符串，方便好用。</p>
<p>8.<a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin" target="_blank" rel="external">FuzzyAutocompletePlugin</a> - 方法名模糊匹配，提高效率的好工具。</p>
<p>9.<a href="https://github.com/travisjeffery/ClangFormat-Xcode" target="_blank" rel="external">ClangFormat-Xcode</a> - 一键格式化代码。</p>
<h5 id="几种处理JSON的工具or网站">几种处理JSON的工具or网站</h5><p><a href="http://www.bejson.com/" target="_blank" rel="external">JSON校验</a></p>
<p><a href="http://www.runoob.com/tool/json/index.html" target="_blank" rel="external">JSON格式化工具</a></p>
<p><a href="http://www.jsoneditoronline.org/" target="_blank" rel="external">json editor online</a></p>
<h5 id="图片压缩">图片压缩</h5><p><a href="https://tinypng.com/" target="_blank" rel="external">tinypng</a> - 无损压缩，高效好用。</p>
<h5 id="调试接口">调试接口</h5><p>Postman(chrome插件 - 见图)</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/20150727/a.png" alt="Postman"></p>
<h5 id="注释">注释</h5><p>几种常用的注释样式：</p>
<p>1.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">strong</span>) RHBankCard *bankCard;<span class="comment">/**&lt;银行卡信息*/</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span> ,<span class="keyword">strong</span>) RHBankCard *bankCard;<span class="comment">///&lt;银行卡信息</span></span><br></pre></td></tr></table></figure>
<p>2.</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span>银行卡信息<span class="keyword">*</span>/</span><br><span class="line"><span class="comment">@property (nonatomic ,strong) RHBankCard *bankCard;</span></span><br></pre></td></tr></table></figure>
<p>3.</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span></span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="constant">ShareTypeSinaWeibo</span> = <span class="number">1</span>,         <span class="regexp">/**&lt; 新浪微博 */</span></span><br><span class="line"> <span class="constant">ShareTypeTencentWeibo</span> = <span class="number">2</span>,      <span class="regexp">/**&lt; 腾讯微博 */</span></span><br><span class="line"> <span class="constant">ShareTypeDouBan</span> = <span class="number">5</span>,            <span class="regexp">/**&lt; 豆瓣社区 */</span></span><br><span class="line"> <span class="constant">ShareTypeQQSpace</span> = <span class="number">6</span>,           <span class="regexp">/**&lt; QQ空间 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="constant">ShareType</span>;</span><br></pre></td></tr></table></figure>
<p>4.</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  initWithStyle</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@param style           style description</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@param reuseIdentifier reuseIdentifier description</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@return self</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString <span class="keyword">*</span>)reuseIdentifier;</span><br></pre></td></tr></table></figure>
<p>前两种注释方式可以自由选择，让代码更美观。第三种是用在enum类型，第四种用的是喵神的<a href="https://github.com/onevcat/VVDocumenter-Xcode" target="_blank" rel="external">VVDocumenter</a>插件，适用于param多的方法。</p>
<h5 id="正确地定义常量">正确地定义常量</h5><p>以前定义常量都是用的#define，很简单也方便，从没想过可能出现的问题。一般这么定义：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#def</span>ine ANIMATION_DURATION_SHORT <span class="number">0.3</span></span><br><span class="line"><span class="hexcolor">#def</span>ine ANIMATION_DURATION_MIDDLE <span class="number">0.6</span></span><br><span class="line"><span class="hexcolor">#def</span>ine ANIMATION_DURATION_LONG <span class="number">1.0</span></span><br></pre></td></tr></table></figure>
<p>这段代码是不是看起来很熟悉，在开发中也会经常用到。那么问题来了，宏定义只是简单地替换，即将一切宏定义替换成定义后面的内容，所以</p>
<ul>
<li>宏定义不会检查替换的“<strong>类型</strong>”，只要遇到，就做替换。</li>
<li>宏定义不保证“<strong>不可变</strong>”，因为可以<strong>重复定义</strong>，不能保证值不变。</li>
</ul>
<p>所以，恰当的常量应该具备合适的名字、正确的类型，还有const、extern等关键字的修饰。例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动画时间长度常量 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> NSTimeInterval kAnimationDurationLong = <span class="number">1.0f</span>;</span><br></pre></td></tr></table></figure>
<p>首先加static，限定在本文件中使用，确保不与其他的常量冲突，其次加const确保常量不被改变。若要定义一个全局变量，则在.h文件中用extern声明，在.m中定义，这样:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> PDUserInfoNotification;</span><br><span class="line"><span class="comment">//.m</span></span><br><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> PDUserInfoNotification = <span class="string">@"PDUserInfoNotification"</span>;</span><br></pre></td></tr></table></figure>
<p>关于这点，更详细的可以看<a href="http://tutuge.me/2015/03/11/Effective-Objective-C-读书笔记-Item-4-如何正确定义常量/" target="_blank" rel="external">这里</a>。</p>
<h5 id="CGRect函数">CGRect函数</h5><p>当访问CGRect里的x, y, width, 或 height时，应该使用<a href="http://developer.apple.com/library/ios/#documentation/graphicsimaging/reference/CGGeometry/Reference/reference.html" target="_blank" rel="external">CGGeometry函数</a>而不是直接通过结构体来访问。引用Apple的CGGeometry:在这个参考文档中所有的函数，接受CGRect结构体作为输入，在计算它们结果时隐式地标准化这些rectangles。因此，你的应用程序应该避免直接访问和修改保存在CGRect数据结构中的数据。相反，使用这些函数来操纵rectangles和获取它们的特性。</p>
<p><strong>应该:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.frame</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> x = <span class="built_in">CGRectGetMinX</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> y = <span class="built_in">CGRectGetMinY</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> width = <span class="built_in">CGRectGetWidth</span>(frame);</span><br><span class="line"><span class="built_in">CGFloat</span> height = <span class="built_in">CGRectGetHeight</span>(frame);</span><br><span class="line"><span class="built_in">CGRect</span> frame = <span class="built_in">CGRectMake</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, width, height);</span><br></pre></td></tr></table></figure>
<p><strong>不应该:</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGRect</span> frame = <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.frame</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> x = frame<span class="variable">.origin</span><span class="variable">.x</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> y = frame<span class="variable">.origin</span><span class="variable">.y</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> width = frame<span class="variable">.size</span><span class="variable">.width</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> height = frame<span class="variable">.size</span><span class="variable">.height</span>;</span><br><span class="line"><span class="built_in">CGRect</span> frame = (<span class="built_in">CGRect</span>)&#123; <span class="variable">.origin</span> = <span class="built_in">CGPointZero</span>, <span class="variable">.size</span> = frame<span class="variable">.size</span> &#125;;</span><br></pre></td></tr></table></figure>
<hr>
<p><a href="https://github.com/samlaudev/Objective-C-Coding-Style#黄金路径" target="_blank" rel="external"></a></p>
<h5 id="黄金路径">黄金路径</h5><p>当使用条件语句编码时，左手边的代码应该是”golden” 或 “happy”路径。也就是不要嵌套if</p>
<p>语句，多个返回语句也是OK。</p>
<p><strong>应该:</strong></p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)someMethod &#123; </span><br><span class="line">  <span class="keyword">if</span> (![someOther boolValue])</span><br><span class="line">   &#123; </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">   &#125; </span><br><span class="line">  <span class="comment">//Do something important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>不应该:</strong></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">-</span> (void)<span class="tag">someMethod</span> &#123;</span><br><span class="line"> <span class="tag">if</span> ([someOther boolValue]) </span><br><span class="line">   &#123; </span><br><span class="line">    <span class="comment">//Do something important</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更多的可以查看<a href="https://github.com/futurice/ios-good-practices" target="_blank" rel="external">iOS-Good-Practices</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="介绍">介绍</h3><p>随着开发的进行，用到的一些小技巧和插件工具也越来越多。在这里统一的总结一下，方便查阅，时时更新。</p>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://v2panda.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS简单使用keychain存储密码]]></title>
    <link href="http://v2panda.com/2015/04/07/iOS-keychain/"/>
    <id>http://v2panda.com/2015/04/07/iOS-keychain/</id>
    <published>2015-04-07T09:54:07.000Z</published>
    <updated>2015-10-26T03:49:42.000Z</updated>
    <content type="html"><![CDATA[<p>Tips:在实习过程中，有次让我实现一个app七天免登陆功能。当时没细想，直接就用NSUserDefaults给做的，用NSDate判断时间，取七天的间隔判断登陆状态。直到现在了解了keychain，才知道用NSUserDefaults是非常不安全的。通常情况下，可以用NSUserDefaults存储数据信息，但是对于一些私密信息，比如账号、密码等等，就需要使用更为安全的keychain了。而Keychain的信息是存在于每个应用（app）的沙盒之外的，所以keychain里保存的信息不会因App被删除而丢失，在用户重新安装App后依然有效，数据还在。</p>
 <a id="more"></a>
<h3 id="KeyChain">KeyChain</h3><p>话不多说，咱们直接来看怎么快速集成keychain。</p>
<ol>
<li>自定义一个类，取名XXXKeyChain，如下：</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Security/Security.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#define KEY_PASSWORD  @<span class="title">"com.rry.app.password"</span></span></span><br><span class="line"><span class="preprocessor">#define KEY_USERNAME_PASSWORD  @<span class="title">"com.rry.app.usernamepassword"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">RRYKeyChain</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (<span class="keyword">void</span>)save:(<span class="built_in">NSString</span> *)service data:(<span class="keyword">id</span>)data;</span><br><span class="line">+ (<span class="keyword">id</span>)load:(<span class="built_in">NSString</span> *)service;</span><br><span class="line">+ (<span class="keyword">void</span>)delete:(<span class="built_in">NSString</span> *)service;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>以上代码自定义了三个方法，存、取、删。并且定义了几个字符串用来做key。当然，想使用keychain请不要忘记引入Security包，引入文件 #import <security security.h="">。 </security></p>
<ol>
<li>再来看.m文件的具体实现</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"RRYKeyChain.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RRYKeyChain</span></span></span><br><span class="line">+ (<span class="built_in">NSMutableDictionary</span> *)getKeychainQuery:(<span class="built_in">NSString</span> *)service &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSMutableDictionary</span> dictionaryWithObjectsAndKeys:</span><br><span class="line">            (<span class="keyword">id</span>)kSecClassGenericPassword,(<span class="keyword">id</span>)kSecClass,</span><br><span class="line">            service, (<span class="keyword">id</span>)kSecAttrService,</span><br><span class="line">            service, (<span class="keyword">id</span>)kSecAttrAccount,</span><br><span class="line">            (<span class="keyword">id</span>)kSecAttrAccessibleAfterFirstUnlock,(<span class="keyword">id</span>)kSecAttrAccessible,</span><br><span class="line">            <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)save:(<span class="built_in">NSString</span> *)service data:(<span class="keyword">id</span>)data &#123;</span><br><span class="line">    <span class="comment">//Get search dictionary</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *keychainQuery = [<span class="keyword">self</span> getKeychainQuery:service];</span><br><span class="line">    <span class="comment">//Delete old item before add new item</span></span><br><span class="line">    SecItemDelete((<span class="built_in">CFDictionaryRef</span>)keychainQuery);</span><br><span class="line">    <span class="comment">//Add new object to search dictionary(Attention:the data format)</span></span><br><span class="line">    [keychainQuery setObject:[<span class="built_in">NSKeyedArchiver</span> archivedDataWithRootObject:data] forKey:(<span class="keyword">id</span>)kSecValueData];</span><br><span class="line">    <span class="comment">//Add item to keychain with the search dictionary</span></span><br><span class="line">    SecItemAdd((<span class="built_in">CFDictionaryRef</span>)keychainQuery, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)load:(<span class="built_in">NSString</span> *)service &#123;</span><br><span class="line">    <span class="keyword">id</span> ret = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *keychainQuery = [<span class="keyword">self</span> getKeychainQuery:service];</span><br><span class="line">    <span class="comment">//Configure the search setting</span></span><br><span class="line">    <span class="comment">//Since in our simple case we are expecting only a single attribute to be returned (the password) we can set the attribute kSecReturnData to kCFBooleanTrue</span></span><br><span class="line">    [keychainQuery setObject:(<span class="keyword">id</span>)k<span class="built_in">CFBooleanTrue</span> forKey:(<span class="keyword">id</span>)kSecReturnData];</span><br><span class="line">    [keychainQuery setObject:(<span class="keyword">id</span>)kSecMatchLimitOne forKey:(<span class="keyword">id</span>)kSecMatchLimit];</span><br><span class="line">    <span class="built_in">CFDataRef</span> keyData = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (SecItemCopyMatching((<span class="built_in">CFDictionaryRef</span>)keychainQuery, (<span class="built_in">CFTypeRef</span> *)&amp;keyData) == noErr) &#123;</span><br><span class="line">        <span class="keyword">@try</span> &#123;</span><br><span class="line">            ret = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithData:(<span class="built_in">NSData</span> *)keyData];</span><br><span class="line">        &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *e) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Unarchive of %@ failed: %@"</span>, service, e);</span><br><span class="line">        &#125; <span class="keyword">@finally</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (keyData)</span><br><span class="line">        <span class="built_in">CFRelease</span>(keyData);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)delete:(<span class="built_in">NSString</span> *)service &#123;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *keychainQuery = [<span class="keyword">self</span> getKeychainQuery:service];</span><br><span class="line">    SecItemDelete((<span class="built_in">CFDictionaryRef</span>)keychainQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后就是存，其中mmm是要存的密码字符串。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSMutableDictionary *usernamepasswordKVPairs = [NSMutableDictionary dictionary];</span><br><span class="line">[usernamepasswordKVPairs <span class="string">setObject:</span>mmm <span class="string">forKey:</span>KEY_PASSWORD];</span><br><span class="line">[RRYKeyChain <span class="string">save:</span>KEY_USERNAME_PASSWORD <span class="string">data:</span>usernamepasswordKVPairs];</span><br></pre></td></tr></table></figure>
<p>取</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableDictionary</span> *usernamepasswordKVPairs = (<span class="built_in">NSMutableDictionary</span> *)[RRYKeyChain load:KEY_USERNAME_PASSWORD];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[usernamepasswordKVPairs objectForKey:KEY_PASSWORD]);</span><br></pre></td></tr></table></figure>
<p>删</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[RRYKeyChain delete:KEY_USERNAME_PASSWORD]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这样一个简单的使用keychain快速存储密码的功能就做好了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Tips:在实习过程中，有次让我实现一个app七天免登陆功能。当时没细想，直接就用NSUserDefaults给做的，用NSDate判断时间，取七天的间隔判断登陆状态。直到现在了解了keychain，才知道用NSUserDefaults是非常不安全的。通常情况下，可以用NSUserDefaults存储数据信息，但是对于一些私密信息，比如账号、密码等等，就需要使用更为安全的keychain了。而Keychain的信息是存在于每个应用（app）的沙盒之外的，所以keychain里保存的信息不会因App被删除而丢失，在用户重新安装App后依然有效，数据还在。</p>]]>
    
    </summary>
    
      <category term="iOS" scheme="http://v2panda.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[v2panda's blog的诞生]]></title>
    <link href="http://v2panda.com/2014/12/26/the-blog's%20birth/"/>
    <id>http://v2panda.com/2014/12/26/the-blog's birth/</id>
    <published>2014-12-26T03:28:11.000Z</published>
    <updated>2015-11-26T06:45:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>这是本博客的第一篇文章，用来记录这个网站的诞生过程。</p>
<a id="more"></a>
<h3 id="环境">环境</h3><p>Required</p>
<ul>
<li>OS X</li>
<li>HomeBrew</li>
<li>Node.js</li>
<li>Git</li>
<li>Hexo</li>
<li>Github</li>
</ul>
<p>Optional</p>
<ul>
<li>百度统计账户</li>
<li>域名</li>
<li>DNSPod账户</li>
</ul>
<h3 id="配置基本环境">配置基本环境</h3><p>安装hexo前先配置好基本环境，有</p>
<ul>
<li>HomeBrew</li>
<li>Git</li>
<li>Node.js</li>
</ul>
<p>安装完后测试，打开<code>Terminal</code>或者<code>iTerm</code>，键入“npm”，出现</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Usage</span>: <span class="string">npm &lt;command&gt;</span></span><br></pre></td></tr></table></figure>
<p>表示Node.js已安装成功。同理，键入“git”，来检测Git是否安装成功。</p>
<h3 id="安装Hexo">安装Hexo</h3><p>直接输入</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> hexo-cli -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<p>Hexo使用-g参数安装到全局，npm前最好加上sudo，避免报权限错误。</p>
<p>至此安装完毕，更多细节参照Hexo的<a href="https://hexo.io/" target="_blank" rel="external">官方文档</a>。</p>
<h3 id="Hexo的建站与配置">Hexo的建站与配置</h3><p>Hexo的<a href="https://hexo.io/" target="_blank" rel="external">官方文档</a>。</p>
<p>Hexo的<a href="https://hexo.io/themes/" target="_blank" rel="external">官方主题</a>。</p>
<h4 id="部署到Github">部署到Github</h4><p>想要部署，首先你得有Github，这无需多言。</p>
<p>部署到GitHub上其实也非常简单，打开站点配置文件_config.yml：</p>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">    <span class="keyword">type</span>: github <span class="comment">#部署工具的类型 </span></span><br><span class="line">    repository:git<span class="macrocall">@github</span>.com:username/username.github.io.git <span class="comment">#SSH链接</span></span><br><span class="line">    branch: master <span class="comment">#分支</span></span><br></pre></td></tr></table></figure>
<h4 id="绑定域名">绑定域名</h4><p>先上<a href="https://www.godaddy.com/" target="_blank" rel="external">狗爹</a>购买，输入你喜欢的域名，检测是否已被使用。</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-birth234048-0933cd8c83f7f7e5.png" alt="firstIMG"></p>
<p>选一个没被taken的域名，买下来。</p>
<p>再设置DNS，用DNSpod，快，免费，稳定。</p>
<p>注册<a href="https://www.dnspod.cn" target="_blank" rel="external">DNSpod</a>，添加域名，如下图设置。</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-birth234048-05f6dbe1c03be571.png" alt="Paste_Image.png"></p>
<p>最后在<a href="https://www.godaddy.com/" target="_blank" rel="external">狗爹</a>修改DNS地址，如图所示</p>
<p><img src="http://7xnmlk.com1.z0.glb.clouddn.com/blog-birth234048-4b0266fc39370f70.png" alt="Paste_Image.png"></p>
<p>然后静待DNS解析完毕，就可以通过你的域名来访问了。</p>
<h4 id="搭建完成">搭建完成</h4><p>至此，就算搭建完成，如需进步一完善请参考Hexo<a href="https://hexo.io/" target="_blank" rel="external">官方文档</a>，文章整理难免有疏漏，如果有错误的地方请留言通知我更改，过程中有疑问的也可以留言，我看到了会尽快解决！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>这是本博客的第一篇文章，用来记录这个网站的诞生过程。</p>]]>
    
    </summary>
    
      <category term="hexo" scheme="http://v2panda.com/tags/hexo/"/>
    
  </entry>
  
</feed>
